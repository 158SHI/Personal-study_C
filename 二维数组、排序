#define _CRT_SECURE_NO_WARNINGS 1

////二维数组的初始化和访问
//#include<stdio.h>
//int main(void)
//{
//	int arr1[3][4] = { 1,2,3,4,5,6,7,8,9,10,11,12};
//	int arr2[][4] = { 1,2,3,4,5,6,7,8,9, };
//	int i = 0;
//	for ( i = 0; i < 3; i++)
//	{
//		int j = 0;
//		for ( j = 0; j < 4; j++)
//		{
//			printf("%-2d ", arr1[i][j]);
//		}
//		printf("\n");
//	}
//}


//选择排序
#include<stdio.h>

void swap(int* x, int* y)
{
	int tmp = *x;
	*x = *y;
	*y = tmp;
}

int main(void)
{
	int arr[] = { 4,2,7,4,3,9,5,2,8,9 };
	int i = 0;
	int j = 0;
	int m = 0;
	int sz = sizeof(arr) / sizeof(arr[0]);
	for ( i = 0; i < sz; i++)
	{
		int min = i;
		for (j = i+1; j < sz;j++) //检索未排序的元素
		{
			if (arr[j] < arr[min]) //找到目前的最小值
			{
				min = j;  //标记最小值
			}
		}
		swap(&arr[min], &arr[i]);  //进行交换
	}
	for ( m = 0; m < sz; m++)
	{
		printf("%d ", arr[m]);
	}
	return 0;
}


//冒泡排序
#include<stdio.h>

void bubble_sort(int arr[], int sz)
{
	int i,j,tmp = 0;
	for ( i = 0; i < sz-1; i++)// i的引入：不断舍去末端已定的数
	{
		for ( j = 0; j < sz-1-i; j++)
		{
			if (arr[j]>arr[j+1]) //进行判断和交换
			{
				tmp = arr[j];
				arr[j] = arr[j + 1];
				arr[j + 1] = tmp;
			}
		}
	}
}

int main(void)
{
	int arr[] = { 4,2,7,4,3,9,5,2,8,9 };
	int sz = sizeof(arr) / sizeof(arr[0]);
	int n = 0;
	bubble_sort(arr,sz);
	for ( n = 0; n < sz; n++)
	{
		printf("%d ", arr[n]);
	}
	return 0;
}
