//二分法求一个无序数组中的任意一个局部最小值_1
//该数组中相邻两个元素都不相等
//#include<stdio.h>
//int main(void)
//{
//	int mid = 0;
//	int arr[] = { 2,1,3,5,3,8,6,9,6,12 };
//	int left = 0;
//	int sz = sizeof(arr) / sizeof(arr[0]);
//	int right = sz - 1;
//	if (arr[left] < arr[left + 1])
//	{
//		printf("该数组中含有一个局部最小值，该值下标为%d", left);
//	}
//	else if (arr[right] < arr[right - 1])
//	{
//		printf("该数组中含有一个局部最小值，该值下标为%d", right);
//	}
//	else
//	{
//		while (left<=right)
//		{
//			mid = (left + right) / 2;
//			if ((arr[mid]<arr[mid-1]) || (arr[mid]<arr[mid+1]))
//			{
//				printf("该数组中含有一个局部最小值，该值下标为%d", mid);
//				break;
//			}
//			else
//			{
//				right = mid - 1;
//			}
//		}
//	}
//	return 0;
//}

//函数方法求解_2
#include<stdio.h>

int Min(int arr[], int sz)
{
	int left = 0;
	int mid = 0;
	int right = sz - 1;
	if (arr[left] < arr[left + 1])
	{
		return left;
	}
	else if (arr[right] < arr[right - 1])
	{
		return right;
	}
	else
	{
		while (left <= right)
		{
			mid = (left + right) / 2;
			if ((arr[mid] < arr[mid - 1]) || (arr[mid] < arr[mid + 1]))
			{
				return mid;
				break;
			}
			else
			{
				right = mid - 1;
			}
		}
	}
}

int main(void)
{
	int arr[] = { 2,1,3,5,3,8,6,9,6,12 };
	int sz = sizeof(arr) / sizeof(arr[0]);
	int ret=Min(arr, sz);
	printf("该数组中含有一个局部最小值，该值下标为%d", ret);
	return 0;
}
