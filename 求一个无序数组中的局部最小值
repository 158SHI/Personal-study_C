//无序数组中局部最小值查找
//二分法求一个无序数组中的任意一个局部最小值
//该数组中相邻两个元素都不相等
#include<stdio.h>

int Check(int sz, int arr[])
{
	int left = 0;
	int right = sz - 1;
	if (arr[left] < arr[left + 1])
	{
		return left;
	}
	else if (arr[right] < arr[right - 1])
	{
		return right;//判断两端
	}
	else//利用二分判断中间
	{
		while (left <= right)
		{
			int mid = left + (right - left) / 2;
			if ((arr[mid] < arr[mid - 1]) && (arr[mid] < arr[mid + 1]))
			{
				return mid;
			}
			else if (arr[mid] < arr[mid - 1] && arr[mid]>arr[mid+1])
			{
				left = mid + 1;
			}
			else
			{
				right = mid - 1;
			}
		}
	}
}

int main()
{
	int arr[] = { 9,8,9,7,5,2,3,7 };
	int sz = sizeof(arr) / sizeof(arr[0]);
	int ret = Check(sz, arr);
	printf("该数组存在一个局部最小值，该元素下表为%d\n", ret);
	return 0;
}
