#define _CRT_SECURE_NO_WARNINGS 1

//不引入第三个变量，交换两个整数的值
//#include<stdio.h>
//int main(void)
//{
//	int a = 3;
//	int b = 5;
//	printf("a=%d b=%d\n", a, b);
//	a = a + b;//a为和，b为b
//	b = a - b;//a-b为a，b为a
//	a = a - b;//a-b为和减a，为b
//	printf("a=%d b=%d\n", a, b);
//	return 0;//容易造成溢出问题
//}

//优化后
//#include<stdio.h>
//int main(void)
//{
//	int a = 3;//  011
//	int b = 5;//  101
//	printf("a=%d b=%d\n", a, b);
//	a = a ^ b;//按位异或运算
//	b = a ^ b;
//	a = a ^ b;
//	printf("a=%d b=%d\n", a, b);
//	return 0;//不会溢出，执行效率较低，可读性低
//}

//给定一个非空整形数组，除一个元素出现一次外，其他元素均出现两次，找出这个只出现一次的数
//#include<stdio.h>
//int main(void)
//{
//	int arr[] = { 1,2,3,4,5,1,2,3,7,4,5 };
//	int i = 0;
//	int sz = sizeof(arr) / sizeof(arr[0]);
//	for ( i = 0; i < sz; i++)
//	{
//		int j = 0;
//		int count = 0;
//		for ( j = 0; j < sz; j++)
//		{
//			if (arr[i]==arr[j])//统计元素出现的次数
//			{
//				count++;
//			}
//		}
//		if (count==1)
//		{
//			printf("目标数字:%d\n", arr[i]);
//			break;
//		}
//	}
//	return 0;//暴力求解
//}

//优化后
#include<stdio.h>
int main(void)
{
	int arr[] = { 1,2,3,4,5,1,2,3,7,4,5 };
	int i = 0;
	int ret = 0;
	int sz = sizeof(arr) / sizeof(arr[0]);// a^0=a
	for ( i = 0; i < sz; i++)             // a^a=a
	{                                     //异或运算满足交换律
		ret = ret ^ arr[i];
	}
	printf("目标数字:%d\n", ret);
	return 0;// 利用按位异或运算
}
