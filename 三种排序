/*
插入排序
*/

#include<stdio.h>

void Sert_sorb(int arr[], int sz)
{
	for (int i = 0; i < sz; i++)
	{
		int key = arr[i];
		int j = i - 1;
		while (j>=0 && arr[j]>key)
		{
			arr[j + 1] = arr[j];
			j--;
		}
		arr[j + 1] = key;
	}
}

int main()
{
	int arr[] = { 4,2,7,5,3,6 };
	int sz = sizeof(arr) / sizeof(arr[0]);
	Sert_sort(arr, sz);
	for (int i = 0; i < sz; i++)
	{
		printf("%d ", arr[i]);
	}
	return 0;
}


/*
选择排序
*/

#include<stdio.h>

void swap(int* x, int* y)
{
	int tmp = *x;
	*x = *y;
	*y = tmp;
}

void selectionSort(int arr[], int sz)
{
	for (int i = 0; i < sz-1; i++)
	{
		int min = i;//假设最小值为第一个元素
		for (int j = i+1; j < sz; j++)
		{
			if (arr[j]<arr[min])
			{
				min = j;//查找和标记未排序部分中的最小值
			}
		}
		swap(&arr[min], &arr[i]);//交换
	}
}

int main()
{
	int arr[] = { 4,2,7,5,3,6 };
	int sz = sizeof(arr) / sizeof(arr[0]);
	selectionSort(arr,sz);
	for (int i = 0; i < sz; i++)
	{
		printf("%d ", arr[i]);
	}
	return 0;
}


/*
冒泡排序
*/

#include<stdio.h>

void Borb_Sort(int arr[], int sz)
{
	for (int i = 0; i < sz-1; i++)//每次检索都产生一个已经有序的元素
	{
		for (int j = 0; j < sz-1-i; j++)
		{
			if (arr[j]>arr[j+1])
			{
				int tmp = arr[j];
				arr[j] = arr[j + 1];
				arr[j + 1] = tmp;
			}
		}
	}
}

int main()
{
	int arr[] = { 4,2,7,5,3,6 };
	int sz = sizeof(arr) / sizeof(arr[0]);
	Borb_Sort(arr, sz);
	for (int i = 0; i < sz; i++)
	{
		printf("%d ", arr[i]);
	}
	return 0;
}
